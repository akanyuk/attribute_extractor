//go:generate go run attribute_extractor.go -input-file=./test.png -output-file=./test.attr.asm

package main

import (
	"attribute_extractor/parser"
	"strings"

	"bufio"
	"flag"
	"fmt"
	"io"
	"log"
	"os"
)

func main() {
	var inputFile = flag.String("input-file", "./test.png", "input png file")
	var outputFile = flag.String("output-file", "/test.attr.asm", "output assembler file")
	flag.Parse()

	reader, err := readInputFile(*inputFile)
	if err != nil {
		log.Fatalf("read input file error: %s", err)
	}

	data, err := parser.Parse(reader)
	if err != nil {
		log.Fatalf("decode PNG error: %s", err)
	}

	if err = generateOutputFile(*outputFile, data); err != nil {
		log.Fatalf("generate output file error: %s", err)
	}
}

func readInputFile(filename string) (io.Reader, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, fmt.Errorf("open file error: %s", err)
	}

	return bufio.NewReader(file), nil
}

func generateOutputFile(filename string, data [][]string) error {
	out, err := os.Create(filename)
	if err != nil {
		log.Fatalf("output file create error: %s", err)
	}

	if _, err = out.Write([]byte("\t// File generated by attribute_extractor\n")); err != nil {
		return fmt.Errorf("file write error: %s", err)
	}

	for _, row := range data {
		if _, err = out.Write([]byte("\tdb " + strings.Join(row, ",") + "\n")); err != nil {
			return fmt.Errorf("file write error: %s", err)
		}
	}

	return nil
}
